# server.port: 443
# server.ssl.key-store: keystore.p12
# server.ssl.key-store-password: springboot
# server.ssl.keyStoreType: PKCS12
# server.ssl.keyAlias: tomcat
server.port=28019
spring.thymeleaf.cache=false
spring.datasource.name=tsunglin00-datasource
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springbootvue3?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true
#spring.datasource.url=jdbc:mysql://192.168.1.100:3306/springbootvue3?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=zaq!xsw@cde#
#spring.datasource.password=ZAQ1xsw@cde#
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=hikariCP
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1
# mybatis config
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

# logging.level.ltd.newbee.mall.dao=debug
# logging.level.com.tsunglin.tsunglin00.dao=debug
# http://localhost:28019/swagger-ui/index.html
# http://127.0.0.1:28019/redis
# http://127.0.0.1:28019/kafka/book/java
########################################################
###REDIS (RedisProperties) redis基本配置；
########################################################
# 找
# docker search redis
# 下載
# docker pull redis
# 啟動
# docker run -p 6379:6379 redis:latest redis-server --appendonly yes --requirepass ""
# docker run -d --name redis -p 6379:6379 redis:latest redis-server --appendonly yes --requirepass "你的密码"
# 查看
# docker ps
# 連結
# docker exec -ti 5ba790c499b5 redis-cli
# Tips:远程连接时，如果不知道容器运行的地址，可以通过这个命令查看：
# docker inspect redis | grep IPAddress
# Redis資料庫索引（預設為0）
spring.redis.database=0
# Redis伺服器地址
spring.redis.host=127.0.0.1
# Redis伺服器連線密碼（預設為空）
#spring.redis.password=
# Redis伺服器連線埠
spring.redis.port=6379
# pool settings ...
# 連線池中的最大空閒連線
spring.redis.pool.max-idle=8
# 連線池中的最小空閒連線
spring.redis.pool.min-idle=0
#連線池最大連線數（使用負值表示沒有限制）
spring.redis.pool.max-active=8
# 連線池最大阻塞等待時間（使用負值表示沒有限制）
spring.redis.pool.max-wait=-1
# 連線超時時間（毫秒）
#spring.redis.timeout=0
# name of Redis server
#spring.redis.sentinel.master=
# comma-separated list of host:port pairs
#spring.redis.sentinel.nodes=
########################################################
### Java Persistence Api 自動進行建表

### Persistence 持久性
### repository 存儲庫
### ORM(Object-Relational Mapping) ORM（對象關係映射）

### JPA 是什麼?
### JPA(Java Persistence API) 是 SUN 針對 ORM 技術提出的規範，目的為簡化持久化的開發工作以及整合各家 ORM 技術(Hibernate、TopLink、OpenJpa…)。

### Spring Data JPA
### Spring Data JPA 是 Spring 根據 ORM 框架和 JPA 規範而封裝的 JPA 應用框架，目的是降低存取資料層的工作量，讓開發人員只需寫出 repository 的介面，而 Spring 自動幫你實作其功能。
########################################################
# Specify the DBMS
spring.jpa.database = MYSQL
# Show or not log for each sql query
spring.jpa.show-sql = true
# hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# stripped before adding them to the entity manager)
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
########################################################
# /usr/local/Cellar/kafka/
# /usr/local/Cellar/kafka/2.4.1
# brew install kafka
# arch -x86_64 brew install kafka
# 啟動zookeeper
# bin/zookeeper-server-start.sh config/zookeeper.properties
# bin/zookeeper-server-start.sh -daemon config/zookeeper.properties
# ./bin/zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties
# 啟動kafka
# bin/kafka-server-start.sh config/server.properties
# ./bin/kafka-server-start /usr/local/etc/kafka/server.properties
# 創建topic:abc123
# ./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic abc123
# 查看topic
# ./bin/kafka-topics --list --zookeeper localhost:2181
# 運行生產者，消息發送到服務器
# ./bin/kafka-console-producer --broker-list localhost:9092 --topic abc123
# 將消息輸儲到標準輸出
# ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic abc123 --from-beginning

# 新增 Topic test的topic,分區為1,副本為1
# kafka-topics --create --bootstrap-server localhost:9092 --topic test --replication-factor 1 --partitions 1

# 列出 Topic test 詳情
# kafka-topics --describe --bootstrap-server localhost:9092 --topic test

# Producer 發佈 Topic test，
# bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test
# kafka-console-producer --bootstrap-server localhost:9092 --topic test

# Consumer 訂閱 Topic test，
# bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test
# kafka-console-consumer --bootstrap-server localhost:9092 --topic test

# //查看topic列表
# bin/kafka-topics.sh --zookeeper localhost:2181 --list

# //创建一个名为topicTest的topic,分区为3,副本为1
# bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic topicTest --partitions 3 --replication- factor 1

# //查看topicTest详情
# bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic topicTest

spring.kafka.bootstrap-servers=localhost:9092
# 當kafka中沒有初始offset或offset超出範圍時將自動重置offset
# earliest:重置為分割槽中最小的offset;
# latest:重置為分割槽中最新的offset(消費分割槽中新產生的資料);
# none:只要有一個分割槽不存在已提交的offset,就丟擲異常;
spring.kafka.consumer.auto-offset-reset=earliest
# Kafka提供的序列化和反序列化類
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# 重試次數
spring.kafka.producer.retries=3

# producer 製片人
# broker 經紀人
# topic 話題
# consumer 消費者
# partitions 分區
# Replication 複製
# http://localhost:28019/kafka/publish/hr/h01
# http://localhost:28019/kafka/publish/sa/s01
# curl -X POST -F 'name=Java' http://localhost:28019/book
# curl -X GET -F 'name=Java' http://localhost:28019/book/Java


# docker-compose -f zk-single-kafka-single.yml up
# docker-compose -f zk-single-kafka-single.yml down
########################################################
#MQTT配置信息
#MQTT服務端地址，端口默認為1883，如果有多個，用逗號隔開，如tcp://127.0.0.1:1883,tcp://192.168.60.133:1883
spring.mqtt.url=tcp://broker.emqx.io:1883
#用戶名
spring.mqtt.username=admin
#密碼
spring.mqtt.password=public
#客戶端id（不能重複）
spring.mqtt.provider.id: provider-id
spring.mqtt.client.id=consumer-id
#MQTT默認的消息推送主題，實際可在調用接口時指定
spring.mqtt.default.topic=topic
########################################################